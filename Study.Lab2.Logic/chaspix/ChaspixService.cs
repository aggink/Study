using Study.Lab2.Logic.Interfaces;
using Study.Lab2.Logic.Interfaces.chaspix;
using System.Diagnostics;

namespace Study.Lab2.Logic.chaspix;

public class ChaspixService : IRunService
{
    private readonly IServerRequestService _serverRequestService;

    public ChaspixService()
    {
        IRequestService requestService = new RequestService(new HttpClient());
        IResponseProcessor responseProcessor = new ResponseProcessor();
        _serverRequestService = new ServerRequestService(requestService, responseProcessor);
    }

    public void RunTask()
    {
        Console.WriteLine("\nüîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (Chaspix)...\n");
        var stopwatch = Stopwatch.StartNew();

        try
        {
            var responses = new List<(string Title, string Data, ConsoleColor Color)>();

            // –ó–∞–ø—Ä–æ—Å 1: –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("üìù –ó–∞–ø—Ä–æ—Å 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ—Å—Ç–∞...");
            Console.ResetColor();
            var post = _serverRequestService.GetRandomPost();
            responses.Add(("–°–õ–£–ß–ê–ô–ù–´–ô –ü–û–°–¢ –ò–ó –ë–õ–û–ì–ê", post, ConsoleColor.Blue));

            // –ó–∞–ø—Ä–æ—Å 2: –ü–æ–≥–æ–¥–∞
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("üå§Ô∏è –ó–∞–ø—Ä–æ—Å 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–≥–æ–¥–µ...");
            Console.ResetColor();
            var weather = _serverRequestService.GetWeatherInfo("Moscow");
            responses.Add(("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ì–û–î–ï –í –ú–û–°–ö–í–ï", weather, ConsoleColor.Yellow));

            // –ó–∞–ø—Ä–æ—Å 3: –§–∞–∫—Ç –æ –∫–æ—à–∫–∞—Ö
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("üê± –ó–∞–ø—Ä–æ—Å 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞ –æ –∫–æ—à–∫–∞—Ö...");
            Console.ResetColor();
            var catFact = _serverRequestService.GetCatFact();
            responses.Add(("–ò–ù–¢–ï–†–ï–°–ù–´–ô –§–ê–ö–¢ –û –ö–û–®–ö–ê–•", catFact, ConsoleColor.Magenta));

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\n‚úÖ –í—Å–µ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n");
            Console.ResetColor();

            DisplayResponses(responses);
        }
        catch (Exception ex)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {ex.Message}");
            Console.ResetColor();
        }
        finally
        {
            stopwatch.Stop();
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.WriteLine($"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {stopwatch.ElapsedMilliseconds} –º—Å");
            Console.ResetColor();
        }
    }

    public async Task RunTaskAsync(CancellationToken cancellationToken = default)
    {
        Console.WriteLine("\nüöÄ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å (Chaspix)...\n");
        var stopwatch = Stopwatch.StartNew();

        try
        {
            Console.ForegroundColor = ConsoleColor.Cyan;
            Console.WriteLine("üîÑ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...");
            Console.ResetColor();

            // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            var postTask = _serverRequestService.GetRandomPostAsync(cancellationToken);
            Console.WriteLine("üìù - –ó–∞–ø—Ä–æ—Å –ø–æ—Å—Ç–∞ –∑–∞–ø—É—â–µ–Ω");

            var weatherTask = _serverRequestService.GetWeatherInfoAsync("Saint Petersburg", cancellationToken);
            Console.WriteLine("üå§Ô∏è - –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –∑–∞–ø—É—â–µ–Ω");

            var catFactTask = _serverRequestService.GetCatFactAsync(cancellationToken);
            Console.WriteLine("üê± - –ó–∞–ø—Ä–æ—Å —Ñ–∞–∫—Ç–∞ –æ –∫–æ—à–∫–∞—Ö –∑–∞–ø—É—â–µ–Ω");

            Console.WriteLine("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...");

            // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await Task.WhenAll(postTask, weatherTask, catFactTask);

            Console.ForegroundColor = ConsoleColor.Green;
            Console.WriteLine("\n‚úÖ –í—Å–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!\n");
            Console.ResetColor();

            var responses = new List<(string Title, string Data, ConsoleColor Color)>
            {
                ("–°–õ–£–ß–ê–ô–ù–´–ô –ü–û–°–¢ –ò–ó –ë–õ–û–ì–ê (ASYNC)", await postTask, ConsoleColor.Blue),
                ("–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–û–ì–û–î–ï –í –°–ü–ë (ASYNC)", await weatherTask, ConsoleColor.Yellow),
                ("–ò–ù–¢–ï–†–ï–°–ù–´–ô –§–ê–ö–¢ –û –ö–û–®–ö–ê–• (ASYNC)", await catFactTask, ConsoleColor.Magenta)
            };

            DisplayResponses(responses);
        }
        catch (OperationCanceledException)
        {
            Console.ForegroundColor = ConsoleColor.DarkYellow;
            Console.WriteLine("\nüõë –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –±—ã–ª–æ –æ—Ç–º–µ–Ω–µ–Ω–æ.");
            Console.ResetColor();
        }
        catch (Exception ex)
        {
            Console.ForegroundColor = ConsoleColor.Red;
            Console.WriteLine($"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {ex.Message}");
            Console.ResetColor();
        }
        finally
        {
            stopwatch.Stop();
            Console.ForegroundColor = ConsoleColor.DarkGreen;
            Console.WriteLine($"\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞: {stopwatch.ElapsedMilliseconds} –º—Å");
            Console.ResetColor();
        }
    }

    private void DisplayResponses(List<(string Title, string Data, ConsoleColor Color)> responses)
    {
        foreach (var (title, data, color) in responses)
        {
            Console.ForegroundColor = color;
            Console.WriteLine($"\n‚ïê‚ïê‚ïê {title} ‚ïê‚ïê‚ïê");
            Console.ResetColor();
            Console.WriteLine(data);
            Console.WriteLine(new string('‚îÄ', 60));
        }
    }

    public void Dispose()
    {
        _serverRequestService?.Dispose();
    }
}