// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Study.Lab3.Storage.Database;

#nullable disable

namespace Study.Lab3.Storage.MS_SQL.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Study.Lab3.Storage.Models.BeautySalon.BeautyAppointment", b =>
                {
                    b.Property<Guid>("IsnAppointment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Day")
                        .HasColumnType("int");

                    b.Property<int>("Hour")
                        .HasColumnType("int");

                    b.Property<Guid>("IsnBeautyClient")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnBeautyService")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Minutes")
                        .HasColumnType("int");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.HasKey("IsnAppointment");

                    b.HasIndex("IsnBeautyClient");

                    b.HasIndex("IsnBeautyService");

                    b.ToTable("BeautyAppointment");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.BeautySalon.BeautyClient", b =>
                {
                    b.Property<Guid>("IsnClient")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("IsnClient");

                    b.ToTable("BeautyClient");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.BeautySalon.BeautyService", b =>
                {
                    b.Property<Guid>("IsnService")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnService");

                    b.ToTable("BeautyService");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Customer", b =>
                {
                    b.Property<Guid>("IsnCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IsnCustomer");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Genre", b =>
                {
                    b.Property<Guid>("IsnGenre")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IsnGenre");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Hall", b =>
                {
                    b.Property<Guid>("IsnHall")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("RowsCount")
                        .HasColumnType("int");

                    b.Property<int>("SeatsPerRow")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("IsnHall");

                    b.ToTable("Halls");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Movie", b =>
                {
                    b.Property<Guid>("IsnMovie")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AgeRating")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("IsnMovie");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.MovieGenre", b =>
                {
                    b.Property<Guid>("IsnMovie")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnGenre")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IsnMovie", "IsnGenre");

                    b.HasIndex("IsnGenre");

                    b.ToTable("MovieGenres");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Seat", b =>
                {
                    b.Property<Guid>("IsnSeat")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsnHall")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("IsnSeat");

                    b.HasIndex("IsnHall");

                    b.ToTable("Seats");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Session", b =>
                {
                    b.Property<Guid>("IsnSession")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsnHall")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnMovie")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("IsnSession");

                    b.HasIndex("IsnHall");

                    b.HasIndex("IsnMovie");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Ticket", b =>
                {
                    b.Property<Guid>("IsnTicket")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSeat")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSession")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TicketCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IsnTicket");

                    b.HasIndex("IsnCustomer");

                    b.HasIndex("IsnSeat");

                    b.HasIndex("IsnSession");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Fitness.FitnessEquipment", b =>
                {
                    b.Property<Guid>("IsnEquipment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("LastMaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("IsnEquipment");

                    b.ToTable("FitnessEquipments");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Fitness.FitnessMember", b =>
                {
                    b.Property<Guid>("IsnMember")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MembershipEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("MembershipStartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("MembershipType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatronymicName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnMember");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Fitness.FitnessTrainer", b =>
                {
                    b.Property<Guid>("IsnTrainer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Certifications")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("ExperienceYears")
                        .HasColumnType("int");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatronymicName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Specialization")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnTrainer");

                    b.ToTable("Trainers");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.GameStore.Developer", b =>
                {
                    b.Property<Guid>("IsnDeveloper")
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<string>("ContactEmail")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("FoundedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Website")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("IsnDeveloper");

                    b.ToTable("Developers");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.GameStore.Game", b =>
                {
                    b.Property<Guid>("IsnGame")
                        .HasColumnType("uuid");

                    b.Property<string>("AgeRating")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Genre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("IsnDeveloper")
                        .HasColumnType("uuid");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("IsnGame");

                    b.HasIndex("IsnDeveloper");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.GameStore.Platform", b =>
                {
                    b.Property<Guid>("IsnPlatform")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int?>("Generation")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("SupportsOnlineGaming")
                        .HasColumnType("boolean");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("IsnPlatform");

                    b.ToTable("Platforms");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.HospitalStore.Order", b =>
                {
                    b.Property<Guid>("IsnOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnPatient")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("IsnOrder");

                    b.HasIndex("IsnPatient");

                    b.HasIndex("IsnProduct");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.HospitalStore.Patient", b =>
                {
                    b.Property<Guid>("IsnPatient")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("MedicalCardId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IsnPatient");

                    b.ToTable("Patients");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.HospitalStore.Product", b =>
                {
                    b.Property<Guid>("IsnProduct")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("IsnProduct");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Library.AuthorBooks", b =>
                {
                    b.Property<Guid>("IsnAuthor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnBook")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IsnAuthor", "IsnBook");

                    b.HasIndex("IsnBook");

                    b.HasIndex("IsnAuthor", "IsnBook");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Library.Authors", b =>
                {
                    b.Property<Guid>("IsnAuthor")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("IsnTeacher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatronymicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnAuthor");

                    b.HasIndex("IsnTeacher")
                        .IsUnique()
                        .HasFilter("[IsnTeacher] IS NOT NULL");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Library.Books", b =>
                {
                    b.Property<Guid>("IsnBook")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PublicationYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IsnBook");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.Menu", b =>
                {
                    b.Property<Guid>("IsnMenu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsnRestaurant")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnMenu");

                    b.HasIndex("IsnRestaurant");

                    b.ToTable("Menus");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.MenuItem", b =>
                {
                    b.Property<Guid>("IsnMenuItem")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CookingTimeMinutes")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsnMenu")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("IsnMenuItem");

                    b.HasIndex("IsnMenu");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.OrderItem", b =>
                {
                    b.Property<Guid>("IsnOrderItem")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnMenuItem")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SpecialRequests")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("IsnOrderItem");

                    b.HasIndex("IsnMenuItem");

                    b.HasIndex("IsnOrder");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.Restaurant", b =>
                {
                    b.Property<Guid>("IsnRestaurant")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WorkingHours")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnRestaurant");

                    b.ToTable("Restaurants");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.RestaurantOrder", b =>
                {
                    b.Property<Guid>("IsnOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CompletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerPhone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("IsnRestaurant")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TableNumber")
                        .HasColumnType("int");

                    b.Property<double>("TotalAmount")
                        .HasColumnType("float");

                    b.HasKey("IsnOrder");

                    b.HasIndex("IsnRestaurant");

                    b.ToTable("RestaurantOrders");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Shelter.Adoption", b =>
                {
                    b.Property<Guid>("IsnAdoption")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AdoptionDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IsnCat")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnMiniPig")
                        .HasColumnType("uuid");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IsnAdoption");

                    b.HasIndex("IsnCat");

                    b.HasIndex("IsnCustomer");

                    b.HasIndex("IsnMiniPig");

                    b.ToTable("Adoptions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Shelter.Cat", b =>
                {
                    b.Property<Guid>("IsnCat")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsAvailableForAdoption")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSterilized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("bit");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Weight")
                        .HasColumnType("int");

                    b.HasKey("IsnCat");

                    b.ToTable("Cats");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Shelter.Customer", b =>
                {
                    b.Property<Guid>("IsnCustomer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("IsnCustomer");

                    b.ToTable("ShelterCustomers");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Shelter.MiniPig", b =>
                {
                    b.Property<Guid>("IsnMiniPig")
                        .HasColumnType("uuid");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsAvailableForAdoption")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsSterilized")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVaccinated")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicalHistory")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("IsnMiniPig");

                    b.ToTable("MiniPigs");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Sweets.Sweet", b =>
                {
                    b.Property<Guid>("IsnSweet")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ingredients")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("IsnSweetType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("IsnSweet");

                    b.HasIndex("IsnSweetType");

                    b.ToTable("Sweets");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Sweets.SweetFactory", b =>
                {
                    b.Property<Guid>("IsnSweetFactory")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("Volume")
                        .HasColumnType("bigint");

                    b.HasKey("IsnSweetFactory");

                    b.ToTable("SweetFactories");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Sweets.SweetProduction", b =>
                {
                    b.Property<Guid>("IsnSweetProduction")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSweet")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSweetFactory")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IsnSweetProduction");

                    b.HasIndex("IsnSweet");

                    b.HasIndex("IsnSweetFactory");

                    b.ToTable("SweetProductions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Sweets.SweetType", b =>
                {
                    b.Property<Guid>("IsnSweetType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("IsnSweetType");

                    b.ToTable("SweetTypes");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.TravelAgency.Hotel", b =>
                {
                    b.Property<Guid>("IsnHotel")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("HasPool")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasSpa")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasWiFi")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("PricePerNight")
                        .HasColumnType("numeric");

                    b.Property<int>("StarRating")
                        .HasColumnType("integer");

                    b.HasKey("IsnHotel");

                    b.ToTable("Hotels");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.TravelAgency.Tour", b =>
                {
                    b.Property<Guid>("IsnTour")
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<int>("MaxParticipants")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IsnTour");

                    b.ToTable("Tours");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.TravelAgency.TravelCustomer", b =>
                {
                    b.Property<Guid>("IsnCustomer")
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsVip")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("PatronymicName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("IsnCustomer");

                    b.ToTable("TravelCustomers");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Announcement", b =>
                {
                    b.Property<Guid>("IsnAnnouncement")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsImportant")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsnTeacher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IsnAnnouncement");

                    b.HasIndex("IsnTeacher");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.AnnouncementGroup", b =>
                {
                    b.Property<Guid>("IsnAnnouncement")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnGroup")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IsnAnnouncement", "IsnGroup");

                    b.HasIndex("IsnGroup");

                    b.HasIndex("IsnAnnouncement", "IsnGroup");

                    b.ToTable("AnnouncementGroups");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Assignment", b =>
                {
                    b.Property<Guid>("IsnAssignment")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IsnAssignment");

                    b.HasIndex("IsnSubject");

                    b.ToTable("Assignments");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.AttendanceLog", b =>
                {
                    b.Property<Guid>("IsnAttendanceLog")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("IsPresent")
                        .HasColumnType("int");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("SubjectDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IsnAttendanceLog");

                    b.HasIndex("IsnStudent");

                    b.HasIndex("IsnSubject");

                    b.ToTable("TheAttendanceLog");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Career", b =>
                {
                    b.Property<Guid>("IsnCareer")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CareerDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("int");

                    b.HasKey("IsnCareer");

                    b.HasIndex("IsnStudent");

                    b.HasIndex("IsnSubject");

                    b.ToTable("Career");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Exam", b =>
                {
                    b.Property<Guid>("IsnExam")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExamDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxScore")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("PassingScore")
                        .HasColumnType("int");

                    b.HasKey("IsnExam");

                    b.HasIndex("IsnSubject");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.ExamRegistration", b =>
                {
                    b.Property<Guid>("IsnExamRegistration")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnExam")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("IsnExamRegistration");

                    b.HasIndex("IsnExam");

                    b.HasIndex("IsnStudent");

                    b.ToTable("ExamRegistrations");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.ExamResult", b =>
                {
                    b.Property<Guid>("IsnExamResult")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<Guid>("IsnExamRegistration")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("IsnExamResult");

                    b.HasIndex("IsnExamRegistration")
                        .IsUnique();

                    b.ToTable("ExamResults");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Grade", b =>
                {
                    b.Property<Guid>("IsnGrade")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("GradeDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("IsnGrade");

                    b.HasIndex("IsnStudent");

                    b.HasIndex("IsnSubject");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Group", b =>
                {
                    b.Property<Guid>("IsnGroup")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IsnGroup");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Kvn", b =>
                {
                    b.Property<Guid>("IsnKvn")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("KvnDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("int");

                    b.HasKey("IsnKvn");

                    b.HasIndex("IsnStudent");

                    b.HasIndex("IsnSubject");

                    b.ToTable("Kvns");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Labs", b =>
                {
                    b.Property<Guid>("IsnLab")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("IsnLab");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Material", b =>
                {
                    b.Property<Guid>("IsnMaterial")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IsnMaterial");

                    b.HasIndex("IsnSubject");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Pingpongclub", b =>
                {
                    b.Property<Guid>("IsnPingpongclub")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uuid");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("PingpongclubDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("IsnPingpongclub");

                    b.HasIndex("IsnStudent");

                    b.HasIndex("IsnSubject");

                    b.ToTable("Pingpongclub");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Profcom", b =>
                {
                    b.Property<Guid>("IsnProfcom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProfcomDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IsnProfcom");

                    b.HasIndex("IsnStudent");

                    b.HasIndex("IsnSubject");

                    b.ToTable("Profcoms");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.ProjectActivities", b =>
                {
                    b.Property<Guid>("IsnProjectActivities")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PerformancesCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProjectActivitiesDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IsnProjectActivities");

                    b.HasIndex("IsnStudent");

                    b.HasIndex("IsnSubject");

                    b.ToTable("ProjectActivities");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Sportclub", b =>
                {
                    b.Property<Guid>("IsnSportclub")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ParticipantsCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("SportclubDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IsnSportclub");

                    b.HasIndex("IsnStudent");

                    b.HasIndex("IsnSubject");

                    b.ToTable("Sportclub");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Student", b =>
                {
                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<Guid>("IsnGroup")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatronymicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnStudent");

                    b.HasIndex("IsnGroup");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.StudentLab", b =>
                {
                    b.Property<Guid>("IsnStudentLab")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnLab")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("IsnStudentLab");

                    b.HasIndex("IsnLab");

                    b.HasIndex("IsnStudent");

                    b.ToTable("StudentLab");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.StudentNote", b =>
                {
                    b.Property<Guid>("IsnNote")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnStudent")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("IsnNote");

                    b.HasIndex("IsnStudent");

                    b.ToTable("StudentNotes");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Subject", b =>
                {
                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("IsnSubject");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.SubjectGroup", b =>
                {
                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnGroup")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IsnSubject", "IsnGroup");

                    b.HasIndex("IsnGroup");

                    b.HasIndex("IsnSubject", "IsnGroup");

                    b.ToTable("SubjectsGroups");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Teacher", b =>
                {
                    b.Property<Guid>("IsnTeacher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PatronymicName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Sex")
                        .HasColumnType("int");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IsnTeacher");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.TeacherSubject", b =>
                {
                    b.Property<Guid>("IsnTeacher")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnSubject")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IsnTeacher", "IsnSubject");

                    b.HasIndex("IsnSubject");

                    b.HasIndex("IsnTeacher", "IsnSubject");

                    b.ToTable("TeacherSubjects");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Workshop.Master", b =>
                {
                    b.Property<Guid>("IsnMaster")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("IsnMaster");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Workshop.Service", b =>
                {
                    b.Property<Guid>("IsnService")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("IsnService");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Workshop.ServiceOrder", b =>
                {
                    b.Property<Guid>("IsnServiceOrder")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustomerPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("IsnMaster")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IsnService")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<double?>("TotalPrice")
                        .HasColumnType("float");

                    b.HasKey("IsnServiceOrder");

                    b.HasIndex("IsnMaster");

                    b.HasIndex("IsnService");

                    b.ToTable("ServiceOrders");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.BeautySalon.BeautyAppointment", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.BeautySalon.BeautyClient", "BeautyClient")
                        .WithMany("BeautyAppointments")
                        .HasForeignKey("IsnBeautyClient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.BeautySalon.BeautyService", "BeautyService")
                        .WithMany("BeautyAppointments")
                        .HasForeignKey("IsnBeautyService")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BeautyClient");

                    b.Navigation("BeautyService");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.MovieGenre", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Cinema.Genre", "Genre")
                        .WithMany("MovieGenres")
                        .HasForeignKey("IsnGenre")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Cinema.Movie", "Movie")
                        .WithMany("MovieGenres")
                        .HasForeignKey("IsnMovie")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Seat", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Cinema.Hall", "Hall")
                        .WithMany("Seats")
                        .HasForeignKey("IsnHall")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hall");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Session", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Cinema.Hall", "Hall")
                        .WithMany("Sessions")
                        .HasForeignKey("IsnHall")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Cinema.Movie", "Movie")
                        .WithMany("Sessions")
                        .HasForeignKey("IsnMovie")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Hall");

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Ticket", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Cinema.Customer", "Customer")
                        .WithMany("Tickets")
                        .HasForeignKey("IsnCustomer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Cinema.Seat", "Seat")
                        .WithMany("Tickets")
                        .HasForeignKey("IsnSeat")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Cinema.Session", "Session")
                        .WithMany("Tickets")
                        .HasForeignKey("IsnSession")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Seat");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.GameStore.Game", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.GameStore.Developer", "Developer")
                        .WithMany("Games")
                        .HasForeignKey("IsnDeveloper");

                    b.Navigation("Developer");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.HospitalStore.Order", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.HospitalStore.Patient", "Patient")
                        .WithMany("Orders")
                        .HasForeignKey("IsnPatient")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.HospitalStore.Product", "Product")
                        .WithMany("Orders")
                        .HasForeignKey("IsnProduct")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Library.AuthorBooks", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Library.Authors", "Author")
                        .WithMany("AuthorBook")
                        .HasForeignKey("IsnAuthor")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Library.Books", "Book")
                        .WithMany("AuthorBook")
                        .HasForeignKey("IsnBook")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Library.Authors", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Teacher", "Teacher")
                        .WithOne("Author")
                        .HasForeignKey("Study.Lab3.Storage.Models.Library.Authors", "IsnTeacher");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.Menu", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Restaurants.Restaurant", "Restaurant")
                        .WithMany("Menus")
                        .HasForeignKey("IsnRestaurant")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.MenuItem", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Restaurants.Menu", "Menu")
                        .WithMany("MenuItems")
                        .HasForeignKey("IsnMenu")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.OrderItem", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Restaurants.MenuItem", "MenuItem")
                        .WithMany("OrderItems")
                        .HasForeignKey("IsnMenuItem")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Restaurants.RestaurantOrder", "RestaurantOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("IsnOrder")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("RestaurantOrder");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.RestaurantOrder", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Restaurants.Restaurant", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("IsnRestaurant")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Shelter.Adoption", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Shelter.Cat", "Cat")
                        .WithMany("Adoptions")
                        .HasForeignKey("IsnCat")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Shelter.Customer", "Customer")
                        .WithMany("Adoptions")
                        .HasForeignKey("IsnCustomer")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Shelter.MiniPig", "MiniPig")
                        .WithMany("Adoptions")
                        .HasForeignKey("IsnMiniPig")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cat");

                    b.Navigation("Customer");

                    b.Navigation("MiniPig");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Sweets.Sweet", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Sweets.SweetType", "SweetType")
                        .WithMany("Sweets")
                        .HasForeignKey("IsnSweetType")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SweetType");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Sweets.SweetProduction", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Sweets.Sweet", "Sweet")
                        .WithMany("SweetProductions")
                        .HasForeignKey("IsnSweet")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Sweets.SweetFactory", "SweetFactory")
                        .WithMany("SweetProductions")
                        .HasForeignKey("IsnSweetFactory")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Sweet");

                    b.Navigation("SweetFactory");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Announcement", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Teacher", "Teacher")
                        .WithMany("Announcements")
                        .HasForeignKey("IsnTeacher")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.AnnouncementGroup", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Announcement", "Announcement")
                        .WithMany("AnnouncementGroups")
                        .HasForeignKey("IsnAnnouncement")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Group", "Group")
                        .WithMany("GroupAnnouncements")
                        .HasForeignKey("IsnGroup")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Announcement");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Assignment", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("Assignments")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.AttendanceLog", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("AttendanceLogs")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("AttendanceLogs")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Career", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("Careers")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("Careers")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Exam", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("Exams")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.ExamRegistration", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Exam", "Exam")
                        .WithMany("Registrations")
                        .HasForeignKey("IsnExam")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("ExamRegistrations")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.ExamResult", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.ExamRegistration", "Registration")
                        .WithOne("Result")
                        .HasForeignKey("Study.Lab3.Storage.Models.University.ExamResult", "IsnExamRegistration")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Registration");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Grade", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("Grades")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Kvn", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("Kvns")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("Kvns")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Material", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("Materials")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Pingpongclub", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("Pingpongclubs")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("Pingpongclubs")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Profcom", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("Profcoms")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("Profcoms")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.ProjectActivities", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("ProjectActivitiess")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("ProjectActivitiess")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Sportclub", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("Sportclubs")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("Sportclubs")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Student", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("IsnGroup")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.StudentLab", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Labs", "Labs")
                        .WithMany("StudentLabs")
                        .HasForeignKey("IsnLab")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("StudentLabs")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Labs");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.StudentNote", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Student", "Student")
                        .WithMany("Notes")
                        .HasForeignKey("IsnStudent")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.SubjectGroup", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Group", "Group")
                        .WithMany("SubjectGroups")
                        .HasForeignKey("IsnGroup")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("GroupSubjects")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.TeacherSubject", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.University.Subject", "Subject")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("IsnSubject")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.University.Teacher", "Teacher")
                        .WithMany("TeacherSubjects")
                        .HasForeignKey("IsnTeacher")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Workshop.ServiceOrder", b =>
                {
                    b.HasOne("Study.Lab3.Storage.Models.Workshop.Master", "Master")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("IsnMaster")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Study.Lab3.Storage.Models.Workshop.Service", "Service")
                        .WithMany("ServiceOrders")
                        .HasForeignKey("IsnService")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Master");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.BeautySalon.BeautyClient", b =>
                {
                    b.Navigation("BeautyAppointments");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.BeautySalon.BeautyService", b =>
                {
                    b.Navigation("BeautyAppointments");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Customer", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Genre", b =>
                {
                    b.Navigation("MovieGenres");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Hall", b =>
                {
                    b.Navigation("Seats");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Movie", b =>
                {
                    b.Navigation("MovieGenres");

                    b.Navigation("Sessions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Seat", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Cinema.Session", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.GameStore.Developer", b =>
                {
                    b.Navigation("Games");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.HospitalStore.Patient", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.HospitalStore.Product", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Library.Authors", b =>
                {
                    b.Navigation("AuthorBook");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Library.Books", b =>
                {
                    b.Navigation("AuthorBook");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.Menu", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.MenuItem", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.Restaurant", b =>
                {
                    b.Navigation("Menus");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Restaurants.RestaurantOrder", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Shelter.Cat", b =>
                {
                    b.Navigation("Adoptions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Shelter.Customer", b =>
                {
                    b.Navigation("Adoptions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Shelter.MiniPig", b =>
                {
                    b.Navigation("Adoptions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Sweets.Sweet", b =>
                {
                    b.Navigation("SweetProductions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Sweets.SweetFactory", b =>
                {
                    b.Navigation("SweetProductions");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Sweets.SweetType", b =>
                {
                    b.Navigation("Sweets");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Announcement", b =>
                {
                    b.Navigation("AnnouncementGroups");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Exam", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.ExamRegistration", b =>
                {
                    b.Navigation("Result");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Group", b =>
                {
                    b.Navigation("GroupAnnouncements");

                    b.Navigation("Students");

                    b.Navigation("SubjectGroups");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Labs", b =>
                {
                    b.Navigation("StudentLabs");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Student", b =>
                {
                    b.Navigation("AttendanceLogs");

                    b.Navigation("Careers");

                    b.Navigation("ExamRegistrations");

                    b.Navigation("Grades");

                    b.Navigation("Kvns");

                    b.Navigation("Notes");

                    b.Navigation("Pingpongclubs");

                    b.Navigation("Profcoms");

                    b.Navigation("ProjectActivitiess");

                    b.Navigation("Sportclubs");

                    b.Navigation("StudentLabs");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Subject", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("AttendanceLogs");

                    b.Navigation("Careers");

                    b.Navigation("Exams");

                    b.Navigation("Grades");

                    b.Navigation("GroupSubjects");

                    b.Navigation("Kvns");

                    b.Navigation("Materials");

                    b.Navigation("Pingpongclubs");

                    b.Navigation("Profcoms");

                    b.Navigation("ProjectActivitiess");

                    b.Navigation("Sportclubs");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.University.Teacher", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Author");

                    b.Navigation("TeacherSubjects");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Workshop.Master", b =>
                {
                    b.Navigation("ServiceOrders");
                });

            modelBuilder.Entity("Study.Lab3.Storage.Models.Workshop.Service", b =>
                {
                    b.Navigation("ServiceOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
